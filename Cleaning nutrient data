######## below codes are for cleaning nutrient supply data 

######## raw data can be downloaded from FAOSTAT 
######## data have also been described in https://github.com/AlistairMcNairSenior/ASM_HumanLT 

# Clean up
rm(list=ls())

library(plyr)
library(tidyverse)
library(countrycode)
 
# Working directory for FBS data
wd<-""
setwd(wd)


fbs_2013<-read.csv("../normalizedFBS_old.csv")
fbs_2019<-read.csv("../normalizedFBS_new.csv")


fbs_old<-fbs_2013
fbs_new<-fbs_2019


combined<-rbind(fbs_old,fbs_new)
colnames<-names(combined)

matched.rows<-inner_join(fbs_new,fbs_old, by=c( "Area.Code",  "Area" , "Item.Code"  ,  "Item" ,   "Element.Code", "Element" ,  "Year.Code" , "Year", "Unit" ))

head(matched.rows)

for (i in 1:nrow(matched.rows)){
matched.rows$Value.mean[i]<-sum(matched.rows$Value.x[i],matched.rows$Value.y[i])/2
}

#matched.rows<-as.data.frame(matched.rows)
#matched.rows$Value.x<-as.numeric(matched.rows$Value.x)
#matched.rows$Value.y<-as.numeric(matched.rows$Value.y)

names(matched.rows)[10:13]

matched.rows<-matched.rows[,-(10:13)]

rematched.rows<-left_join(fbs_new,matched.rows, by=c( "Area.Code",  "Area" , "Item.Code"  ,  "Item" ,   "Element.Code", "Element" ,  "Year.Code" , "Year", "Unit" ))


#wd<-"../Data"
#setwd(wd)
#write.csv(rematched.rows,"FBS_withmeans.csv")
#rematched.rows<-read.csv("FBS_withmeans.csv")

head(rematched.rows)
tag<-as.vector(which(is.na(rematched.rows$Value.mean)))

rematched.rows$Value.mean[tag]<-rematched.rows$Value[tag]

old_rematched<-anti_join(fbs_old,rematched.rows,by=c("Area.Code",  "Area" , "Item.Code"  ,  "Item" ,   "Element.Code", "Element" ,  "Year.Code" , "Year", "Unit" ))

new.data<-rematched.rows
old.data<-old_rematched

names(new.data)[10]
# "Value"

new<-new.data[,-10]
names(new)[11]<-"Value"
old<-old.data

combined<-rbind(new,old)

group1<-which(combined$Item == "Grand Total" & combined$Element == "Food supply (kcal/capita/day)")
group2<-which(combined$Item == "Grand Total" & combined$Element == "Protein supply quantity (g/capita/day)")
group3<-which(combined$Item == "Grand Total" & combined$Element == "Fat supply quantity (g/capita/day)")
group4<-which(combined$Item == "Alcoholic Beverages" & combined$Element == "Food supply (kcal/capita/day)")
group5<-which(combined$Item == "Vegetal Products" & combined$Element == "Protein supply quantity (g/capita/day)")
group6<-which(combined$Item == "Animal Products" & combined$Element == "Protein supply quantity (g/capita/day)")

combined$Food_group<-NA
combined$Food_group[group1]<-"Total.kcal"
combined$Food_group[group2]<-"Protein.g"
combined$Food_group[group3]<-"Fat.g"
combined$Food_group[group4]<-"Alcohol.kcal"
combined$Food_group[group5]<-"Protein_vegetal.g"
combined$Food_group[group6]<-"Protein_animal.g"

filtered<-combined[c(group1, group2, group3, group4, group5, group6),]

# Cut out some of the other stuff that is not needed 
filtered<-filtered[,c("Area", "Year", "Food_group", "Value")]

# Reshape to be wide format
wide<-reshape(filtered, direction="wide", idvar=c("Area", "Year"), v.names="Value", timevar="Food_group")
wide$Protein.kcal<-wide$Value.Protein.g * 4
wide$Fat.kcal<-wide$Value.Fat.g * 9
wide$Alcohol.kcal<-wide$Value.Alcohol.kcal

# Note for the UAE Alcohol is listed as NA as the country is dry - lets set it to 0
wide$Alcohol.kcal[which(is.na(wide$Alcohol.kcal) == T)]<-0
wide$Carbo.kcal<-wide$Value.Total.kcal - wide$Protein.kcal - wide$Fat.kcal - wide$Alcohol.kcal
wide$Protein_vegetal.kcal<-wide$Value.Protein_vegetal.g * 4
wide$Protein_animal.kcal<-wide$Value.Protein_animal.g * 4
wide$Prop_ABP<-wide$Protein_animal.kcal / wide$Protein.kcal
wide$Prop_PBP<-wide$Protein_vegetal.kcal / wide$Protein.kcal


# Clean out some more
wide<-wide[,c("Area", "Year", "Protein.kcal", "Carbo.kcal", "Fat.kcal", "Alcohol.kcal","Protein_vegetal.kcal","Protein_animal.kcal","Prop_ABP","Prop_PBP","Value.Total.kcal")]


# We have to split and duplicate the belgium-luxembourg data (which was pooled until 2000) as we have seperatre lifetables for these
tag<-which(wide$Area == "Belgium-Luxembourg")
tag
BL_data<-wide[tag,]
wide$Area[tag]<-"Belgium"
BL_data$Area<-"Luxembourg"
wide<-rbind(wide, BL_data)

# We have to split and duplicate the serbia-montenegro data (which was pooled in mid 2000s) as we have seperatre lifetables for these
tag<-which(wide$Area == "Serbia and Montenegro")

SM_data<-wide[tag,]
wide$Area[tag]<-"Serbia"
SM_data$Area<-"Montenegro"
wide<-rbind(wide, SM_data)


# We have to split out the data on Yugoslav SFR as we have seperate lifetables for bosnia, serbia, slovenia, croatia, macedonia and montenegro 
tag<-which(wide$Area == "Yugoslav SFR")
tag
YG_data<-wide[tag,]
YG_data$Area<-"Bosnia & Herzegovina"
wide<-rbind(wide, YG_data)
YG_data$Area<-"Serbia"
wide<-rbind(wide, YG_data)
YG_data$Area<-"Slovenia"
wide<-rbind(wide, YG_data)
YG_data$Area<-"Macedonia"
wide<-rbind(wide, YG_data)
YG_data$Area<-"Montenegro"
wide<-rbind(wide, YG_data)
YG_data$Area<-"Croatia"
wide<-rbind(wide, YG_data)


# We have to split out the data on Czechoslovakia as we have seperate lifetables for Czechia, and slovakia 
tag<-which(wide$Area == "Czechoslovakia")
tag
CZ_data<-wide[tag,]
CZ_data$Area<-"Czechia"
wide<-rbind(wide, CZ_data)
CZ_data$Area<-"Slovakia"
wide<-rbind(wide, CZ_data)

# We have to split out the data on USSR as we have seperate lifetables for Russia, Lithuania, Tajikistan and Estonia 
tag<-which(wide$Area == "USSR")
tag
US_data<-wide[tag,]
US_data$Area<-"Lithuania"
wide<-rbind(wide, US_data)
US_data$Area<-"Estonia"
wide<-rbind(wide, US_data)
US_data$Area<-"Russian Federation"
wide<-rbind(wide, US_data)
US_data$Area<-"Tajikistan"
wide<-rbind(wide, US_data)

# Sort by country
wide<-wide[order(wide$Area),]

# Convert to iso3c country names as used in the LT data
wide$Country<-countrycode(wide$Area, origin="country.name", destination="iso3c")

# Add a country code for YUG - seems to be missing from the function and we have one or two LTs for Yugoslavia as a whole
tag<-which(wide$Area == "Yugoslav SFR")
wide$Country[tag]<-"YUG"

# Add a country code for CSK - seems to be missing from the function, and we have LTs for Czechoslovakia as a whole
tag<-which(wide$Area == "Czechoslovakia")
wide$Country[tag]<-"CSK"

# Add a country code for SUN - seems to be missing from the function, and we have LTs for USSR as a whole
tag<-which(wide$Area == "USSR")
wide$Country[tag]<-"SUN"

NArow<-which(is.na(wide$Country))
wide<-wide[-NArow,]

# Save the clean table as a .csv file
setwd(paste0(wd, "../Clean_Data"))


stamp<-as.character(format(Sys.time(), "%a_%b_%d_%H-%M_%Y"))

write.table(wide, file=paste0("Clean_FB_",stamp,".csv"), sep=",", row.names=F, col.names=names(wide))


